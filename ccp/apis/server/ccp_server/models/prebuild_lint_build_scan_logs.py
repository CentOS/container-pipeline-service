# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ccp_server.models.base_model_ import Model
from ccp_server.models.all_scanner_logs import AllScannerLogs  # noqa: F401,E501
from ccp_server import util


class PrebuildLintBuildScanLogs(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, prebuild: str=None, lint: str=None, build: str=None, scan: AllScannerLogs=None):  # noqa: E501
        """PrebuildLintBuildScanLogs - a model defined in Swagger

        :param prebuild: The prebuild of this PrebuildLintBuildScanLogs.  # noqa: E501
        :type prebuild: str
        :param lint: The lint of this PrebuildLintBuildScanLogs.  # noqa: E501
        :type lint: str
        :param build: The build of this PrebuildLintBuildScanLogs.  # noqa: E501
        :type build: str
        :param scan: The scan of this PrebuildLintBuildScanLogs.  # noqa: E501
        :type scan: AllScannerLogs
        """
        self.swagger_types = {
            'prebuild': str,
            'lint': str,
            'build': str,
            'scan': AllScannerLogs
        }

        self.attribute_map = {
            'prebuild': 'prebuild',
            'lint': 'lint',
            'build': 'build',
            'scan': 'scan'
        }

        self._prebuild = prebuild
        self._lint = lint
        self._build = build
        self._scan = scan

    @classmethod
    def from_dict(cls, dikt) -> 'PrebuildLintBuildScanLogs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PrebuildLintBuildScanLogs of this PrebuildLintBuildScanLogs.  # noqa: E501
        :rtype: PrebuildLintBuildScanLogs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prebuild(self) -> str:
        """Gets the prebuild of this PrebuildLintBuildScanLogs.


        :return: The prebuild of this PrebuildLintBuildScanLogs.
        :rtype: str
        """
        return self._prebuild

    @prebuild.setter
    def prebuild(self, prebuild: str):
        """Sets the prebuild of this PrebuildLintBuildScanLogs.


        :param prebuild: The prebuild of this PrebuildLintBuildScanLogs.
        :type prebuild: str
        """

        self._prebuild = prebuild

    @property
    def lint(self) -> str:
        """Gets the lint of this PrebuildLintBuildScanLogs.


        :return: The lint of this PrebuildLintBuildScanLogs.
        :rtype: str
        """
        return self._lint

    @lint.setter
    def lint(self, lint: str):
        """Sets the lint of this PrebuildLintBuildScanLogs.


        :param lint: The lint of this PrebuildLintBuildScanLogs.
        :type lint: str
        """

        self._lint = lint

    @property
    def build(self) -> str:
        """Gets the build of this PrebuildLintBuildScanLogs.


        :return: The build of this PrebuildLintBuildScanLogs.
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build: str):
        """Sets the build of this PrebuildLintBuildScanLogs.


        :param build: The build of this PrebuildLintBuildScanLogs.
        :type build: str
        """

        self._build = build

    @property
    def scan(self) -> AllScannerLogs:
        """Gets the scan of this PrebuildLintBuildScanLogs.


        :return: The scan of this PrebuildLintBuildScanLogs.
        :rtype: AllScannerLogs
        """
        return self._scan

    @scan.setter
    def scan(self, scan: AllScannerLogs):
        """Sets the scan of this PrebuildLintBuildScanLogs.


        :param scan: The scan of this PrebuildLintBuildScanLogs.
        :type scan: AllScannerLogs
        """

        self._scan = scan
