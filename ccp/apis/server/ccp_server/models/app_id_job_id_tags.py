# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ccp.apis.server.ccp_server.models.base_model_ import Model
from ccp.apis.server.ccp_server.models.app_id_job_id_tag import\
    AppIdJobIdTag  # noqa: F401,E501
from ccp.apis.server.ccp_server.models.meta import Meta  # noqa: F401,E501
from ccp.apis.server.ccp_server import util


class AppIdJobIdTags(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, meta: Meta=None, app_id: str=None, job_id: str=None, tags: List[AppIdJobIdTag]=None):  # noqa: E501
        """AppIdJobIdTags - a model defined in Swagger

        :param meta: The meta of this AppIdJobIdTags.  # noqa: E501
        :type meta: Meta
        :param app_id: The app_id of this AppIdJobIdTags.  # noqa: E501
        :type app_id: str
        :param job_id: The job_id of this AppIdJobIdTags.  # noqa: E501
        :type job_id: str
        :param tags: The tags of this AppIdJobIdTags.  # noqa: E501
        :type tags: List[AppIdJobIdTag]
        """
        self.swagger_types = {
            'meta': Meta,
            'app_id': str,
            'job_id': str,
            'tags': List[AppIdJobIdTag]
        }

        self.attribute_map = {
            'meta': 'meta',
            'app_id': 'app_id',
            'job_id': 'job_id',
            'tags': 'tags'
        }

        self._meta = meta
        self._app_id = app_id
        self._job_id = job_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'AppIdJobIdTags':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppIdJobIdTags of this AppIdJobIdTags.  # noqa: E501
        :rtype: AppIdJobIdTags
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self) -> Meta:
        """Gets the meta of this AppIdJobIdTags.


        :return: The meta of this AppIdJobIdTags.
        :rtype: Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta: Meta):
        """Sets the meta of this AppIdJobIdTags.


        :param meta: The meta of this AppIdJobIdTags.
        :type meta: Meta
        """

        self._meta = meta

    @property
    def app_id(self) -> str:
        """Gets the app_id of this AppIdJobIdTags.


        :return: The app_id of this AppIdJobIdTags.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id: str):
        """Sets the app_id of this AppIdJobIdTags.


        :param app_id: The app_id of this AppIdJobIdTags.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def job_id(self) -> str:
        """Gets the job_id of this AppIdJobIdTags.


        :return: The job_id of this AppIdJobIdTags.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this AppIdJobIdTags.


        :param job_id: The job_id of this AppIdJobIdTags.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def tags(self) -> List[AppIdJobIdTag]:
        """Gets the tags of this AppIdJobIdTags.


        :return: The tags of this AppIdJobIdTags.
        :rtype: List[AppIdJobIdTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[AppIdJobIdTag]):
        """Sets the tags of this AppIdJobIdTags.


        :param tags: The tags of this AppIdJobIdTags.
        :type tags: List[AppIdJobIdTag]
        """

        self._tags = tags
