apiVersion: "v1"
kind: "Template"
metadata:
  name: "master-job-template"
objects:
  - apiVersion: "v1"
    kind: "BuildConfig"
    metadata:
      name: ${PIPELINE_NAME}
    spec:
      source:
        type: Git
        git:
          uri: ${GIT_URL}
          ref: ${GIT_BRANCH}
      strategy:
        type: "JenkinsPipeline"
        jenkinsPipelineStrategy:
          jenkinsfile: |
            properties([
                pipelineTriggers([
                    pollSCM('H/10 * * * *'),
                    upstream(
                        threshold: 'SUCCESS',
                        upstreamProjects: '${DEPENDS_ON}'
                    )
                ])
            ])
            podTemplate(
                cloud: 'openshift',
                name: 'ccp-pipeline-master',
                label: 'ccp-pipeline-master',
                namespace: '${NAMESPACE}',
                serviceAccount: 'jenkins',
                containers: [
                  containerTemplate(
                    name: 'jnlp',
                    image: '${CCP_OPENSHIFT_SLAVE_IMAGE}',
                    ttyEnabled: true,
                    alwaysPullImage: true,
                    workingDir: '/tmp',
                    privileged: true,
                    args: '${computer.jnlpmac} ${computer.name}',
                    resourceRequestCpu: '${MASTER_JOB_CPU}',
                    resourceRequestMemory: '${MASTER_JOB_MEMORY}'
                  )
                ],
                volumes: [
                  hostPathVolume(
                    hostPath: '/var/lib/containers',
                    mountPath: '/var/lib/containers'
                  ),
                  hostPathVolume(
                    hostPath: '/var/run/docker.sock',
                    mountPath: '/var/run/docker.sock'
                  )
                ]
            )
            {
                node('ccp-pipeline-master') {
                    def image_name = "${APP_ID}/${JOB_ID}:${DESIRED_TAG}"

                    //For the library images like centos and languages we push the image without an app_id
                    // this makes sure we can pull or push the images like 'registry/centos:7'
                    if("${APP_ID}" == "library")
                    {
                        image_name = "${JOB_ID}:${DESIRED_TAG}"
                    }

                    def image_name_with_registry = "${REGISTRY_URL}/${image_name}"
                    def slave_container_name = "jnlp_ccp-pipeline-master"

                    //base image name is retrieved from the target-file of the source repo
                    //this is the FROM in the target-file. for example 'base/image-with:tag'
                    def base_image_name = ""

                    // setting this to ensure the user is notificatied only after the mandatory stages are complete
                    // i.e. (checkout, prebuild) - lint - build - scan - deliver
                    def success = false
                    // setting this to ensure the image is removed from the system if its locally built
                    def image_is_built = false
                    try {
                        stage('Checkout Source') {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: "${GIT_BRANCH}"]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [
                                    [$class: 'RelativeTargetDirectory', relativeTargetDir: "${PIPELINE_NAME}"],
                                    [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true, timeout: 10]
                                ],
                                submoduleCfg: [],
                                userRemoteConfigs: [
                                    [url: "${GIT_URL}"]
                                ]
                            ])
                        }
                        stage('Prebuild source repo'){
                            if("${PRE_BUILD_SCRIPT}" != "None")
                            {
                               dir("${PIPELINE_NAME}/${PRE_BUILD_CONTEXT}"){
                                  sh "sh ${PRE_BUILD_SCRIPT} > pre_build_log_file"
                                  sh "cat pre_build_log_file && rm -rf pre_build_log_file"
                               }
                            }
                            else
                            {
                                echo "Prebuild is not requested"
                            }
                        }
                        stage('Lint the Dockerfile'){
                            dir("${PIPELINE_NAME}/${GIT_PATH}"){
                                // def out = sh script:"dockerfile_lint ${TARGET_FILE}", returnStatus: true
                                // sh "echo ${out}"
                                def output = sh(returnStdout: true, script: 'dockerfile_lint -f ${TARGET_FILE} > result 2>&1', returnStatus: true)
                                sh "cat result"
                            }
                        }
                        stage('Build the container image and push to Docker daemon') {
                            dir("${PIPELINE_NAME}/${GIT_PATH}"){
                                base_image_name = sh(returnStdout:true, script: "cat ${TARGET_FILE}|awk '/^FROM/ {print \$2}'").trim()
                                // Build the image by always pulling the base image
                                sh "buildah bud --no-cache --pull -t ${image_name_with_registry} -f ${TARGET_FILE} ${BUILD_CONTEXT}"
                                sh "buildah push ${image_name_with_registry} docker-daemon:${image_name_with_registry}"
                            }
                            image_is_built = true
                        }
                        stage('Scan the image') {
                            parallel (
                                "RPM updates": {
                                  sh (returnStdout: true, script: "docker run --user root --rm --volumes-from `docker ps -qf name=${slave_container_name} | head -n 1` --entrypoint /usr/bin/python ${image_name_with_registry} /opt/ccp-openshift/ccp/scanning/yumupdates.py > yum-check-update 2>&1")
                                  sh "cat yum-check-update"
                                },
                                "Verify RPMs": {
                                  sh (returnStdout: true, script: "docker run --user root --rm --volumes-from `docker ps -qf name=${slave_container_name} | head -n 1` --entrypoint /usr/bin/python ${image_name_with_registry} /opt/ccp-openshift/ccp/scanning/rpmverify.py > rpm-verify 2>&1")
                                  sh "cat rpm-verify"
                                },
                                "Miscellaneous updates": {
                                  sh (returnStdout: true, script: "docker run --user root --rm --volumes-from `docker ps -qf name=${slave_container_name} | head -n 1` --entrypoint /usr/bin/python ${image_name_with_registry} /opt/ccp-openshift/ccp/scanning/misc_package_updates.py all > misc-updates 2>&1")
                                  sh "cat misc-updates"
                                },
                                "Container capabilities": {
                                  def run_label = sh (script: "docker inspect ${image_name_with_registry} --format '{{ index .Config.Labels \"RUN\" }}'")
                                  sh (returnStdout: true, script: "docker run --user root --rm --volumes-from `docker ps -qf name=${slave_container_name} | head -n 1` --entrypoint /usr/bin/python ${image_name_with_registry} /opt/ccp-openshift/ccp/scanning/container-capabilities.py ' ${run_label} ' > capabilities 2>&1")
                                  sh "cat capabilities"
                                }
                            )
                        }
                        stage("Push image to registry") {
                            // sh "buildah tag ${image_name} ${image_name_with_registry}"
                            sh "buildah push --tls-verify=false ${image_name_with_registry}"
                            // image lint - build - scan - deliver is successful
                            success = true
                        }

                    }
                    finally {
                      stage("Notify user"){
                          sh "mkfifo /var/spool/postfix/public/pickup && postfix start"
                          if (success==true) {
                            sh "PYTHONPATH=${PIPELINE_REPO_DIR} python ${PIPELINE_REPO_DIR}/ccp/notifications/notify.py success ${NAMESPACE} `oc get route jenkins -o template --template={{.spec.host}}` ${image_name} ${BUILD_NUMBER} ${PIPELINE_NAME}"
                          } else {
                            sh "PYTHONPATH=${PIPELINE_REPO_DIR} python ${PIPELINE_REPO_DIR}/ccp/notifications/notify.py failed ${NAMESPACE} `oc get route jenkins -o template --template={{.spec.host}}` ${image_name} ${BUILD_NUMBER} ${PIPELINE_NAME}"
                            }
                    }
                      if (image_is_built == true) {
                        // this stage should be triggered only if image_is_built
                        // or if image_is_built and there are failures in subsequent stages after building the image
                        // we need to make sure the image is removed in either case
                        stage('Remove the image') {
                          // don't fail the pipeline if image removal failed due to some error
                          sh (script: "buildah rmi ${image_name_with_registry}; buildah rmi ${image_name_with_registry}", returnStatus: true)
                          def output = sh(returnStdout:true, script: "docker rmi ${base_image_name} > image-remove 2>&1", returnStatus: true)
                          sh "cat image-remove"
                          sh(script: "docker rmi `docker images -q -f dangling=true`", returnStatus: true)
                        }
                      }
                  }
              }
            }
          env:
          - name: GIT_URL
            value: ${GIT_URL}
          - name: GIT_BRANCH
            value: ${GIT_BRANCH}
          - name: GIT_PATH
            value: ${GIT_PATH}
          - name: TARGET_FILE
            value: ${TARGET_FILE}
          - name: DESIRED_TAG
            value: ${DESIRED_TAG}
          - name: NOTIFY_EMAIL
            value: ${NOTIFY_EMAIL}
          - name: NOTIFY_CC_EMAILS
            value: ${NOTIFY_CC_EMAILS}
          - name: REGISTRY_ALIAS
            value: ${REGISTRY_ALIAS}
          - name: DEPENDS_ON
            value: ${DEPENDS_ON}
          - name: BUILD_CONTEXT
            value: ${BUILD_CONTEXT}
          - name: PIPELINE_NAME
            value: ${PIPELINE_NAME}
          - name: APP_ID
            value: ${APP_ID}
          - name: JOB_ID
            value: ${JOB_ID}
          - name: PRE_BUILD_SCRIPT
            value: ${PRE_BUILD_SCRIPT}
          - name: PRE_BUILD_CONTEXT
            value: ${PRE_BUILD_CONTEXT}
          - name: REGISTRY_URL
            value: ${REGISTRY_URL}
          - name: FROM_ADDRESS
            value: ${FROM_ADDRESS}
          - name: SMTP_SERVER
            value: ${SMTP_SERVER}
          - name: PIPELINE_REPO_DIR
            value: ${PIPELINE_REPO_DIR}
          - name: NAMESPACE
            value: ${NAMESPACE}
      triggers:
          - type: ConfigChange
parameters:
- description: "Path to the directory containing a Dockerfile"
  displayName: "Git Path"
  name: GIT_PATH
  required: true
- description: "Name of the Dockerfile to be built"
  displayName: Dockerfile
  name: TARGET_FILE
  required: true
- description: Tag for the resulting image
  displayName: Desired Tag
  name: DESIRED_TAG
  required: true
- description: Email to send notification to
  displayName: Notification email
  name: NOTIFY_EMAIL
  required: true
- description: Comma separated email addresses to add in Cc
  displayName: Notification Cc emails
  name: NOTIFY_CC_EMAILS
  required: false
  value: "null"
- description: Registry alias to be referenced in email subject and body instead of actual REGISTRY_URL
  displayName: Registry alias to be referenced in email subject and body
  name: REGISTRY_ALIAS
  required: false
  value: "null"
- description: Parent image for the project
  displayName: Parent image
  name: DEPENDS_ON
- description: URL to the Git Repo
  displayName: Git URL
  name: GIT_URL
- description: Git branch to build off
  displayName: Git Branch
  name: GIT_BRANCH
  required: true
- description: Docker build context
  displayName: Build Context
  name: BUILD_CONTEXT
  required: true
  value: "./"
- description: Name of the Pipeline as we want to show up on OpenShift console
  displayName: Pipeline Name
  name: PIPELINE_NAME
  required: true
- description: Git repo containing the Jenkinsfile
  displayName: Jenkinsfile repo
  name: JENKINSFILE_GIT_URL
  required: true
  value: https://github.com/dharmit/ccp-openshift
- description: Git repo branch containing the Jenkinsfile
  displayName: Jenkinsfile repo branch
  name: JENKINSFILE_GIT_BRANCH
  required: true
  value: master
- description: app_id is analogoues to username in Docker Hub
  displayName: App ID
  name: APP_ID
  required: true
- description: job_id is analogoues to repo name in Docker Hub
  displayName: Job ID
  name: JOB_ID
  required: true
- description: Pre build script is the script runs as pre build stage for building source repo
  displayName: Prebuild Script
  name: PRE_BUILD_SCRIPT
- description: Pre Build context is path from where prebuild_script is triggered in the repo
  displayName: Prebuild Context
  name: PRE_BUILD_CONTEXT
- description: Namespace to which the resulting Jenkins Pipelines should belong
  displayName: OpenShift namespace
  name: NAMESPACE
  required: true
- description: URL of the registry to which image is to be pushed
  name: REGISTRY_URL
  displayName: Registry URL
- description: From address to be used when sending email
  displayName: From email address
  name: FROM_ADDRESS
  required: true
- description: SMTP server to use to send emails
  displayName: SMTP server address
  name: SMTP_SERVER
  required: true
- description: Directory where Pipeline service code is present in slave container
  displayName: Pipeline service code repo directory
  name: PIPELINE_REPO_DIR
  required: true
  value: /opt/ccp-openshift
- description: ccp-openshift-slave container image name (with registry name)
  displayName: ccp-openshift-slave container image
  name: CCP_OPENSHIFT_SLAVE_IMAGE
  required: true
  value: registry.centos.org/pipeline-images/ccp-openshift-slave:latest
- description: Number of CPUs to be requested from OpenShift to start master-job slave pod
  displayName: master job CPU
  name: MASTER_JOB_CPU
  required: true
- description: Amount of memory to be requested from OpenShift to start master-job slave pod
  displayName: master job memory
  name: MASTER_JOB_MEMORY
  required: true
