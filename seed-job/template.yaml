apiVersion: "v1"
kind: "Template"
metadata:
  name: "master-job-template"
objects:
  - apiVersion: "v1"
    kind: "BuildConfig"
    metadata:
      name: ${PIPELINE_NAME}
    spec:
      source:
        type: Git
        git:
          uri: ${GIT_URL}
          ref: ${GIT_BRANCH}
        contextDir: ${CONTEXT_DIR}
      strategy:
        type: "JenkinsPipeline"
        jenkinsPipelineStrategy:
          jenkinsfile: |
            properties([
                pipelineTriggers([
                    pollSCM('H/10 * * * *'),
                    upstream(
                        threshold: 'SUCCESS',
                        upstreamProjects: '${DEPENDS_ON}'
                    )
                ])
            ])
            podTemplate(
                cloud: 'openshift',
                name: 'ccp-pipeline',
                label: 'ccp-pipeline',
                serviceAccount: 'jenkins',
                containers: [
                  containerTemplate(
                    name: 'jnlp',
                    image: 'registry.centos.org/dharmit/ccp-openshift-slave',
                    ttyEnabled: true,
                    alwaysPullImage: true,
                    workingDir: '/tmp',
                    privileged: true,
                    args: '${computer.jnlpmac} ${computer.name}'
                  )
                ],
                volumes: [
                  hostPathVolume(
                    hostPath: '/var/run/docker.sock',
                    mountPath: '/var/run/docker.sock'
                  )
                ]
            )
            {
                node('ccp-pipeline') {
                    def image_name = "${APP_ID}/${JOB_ID}:${DESIRED_TAG}"
                    def image_name_with_registry = "${REGISTRY_URL}/${image_name}"
                    def scan_data_image = "172.29.33.48:5000/nshaikh/ccp-openshift-scan"
                    def scan_data_container = "scan_${APP_ID}_${JOB_ID}_${DESIRED_TAG}"
                    stage('Checkout Source') {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "${GIT_BRANCH}"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [
                                [$class: 'RelativeTargetDirectory', relativeTargetDir: "${PIPELINE_NAME}"],
                                [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true, timeout: 10]
                            ],
                            submoduleCfg: [],
                            userRemoteConfigs: [
                                [url: "${GIT_URL}"]
                            ]
                        ])
                    }
                    stage('Lint the Dockerfile'){
                        dir("${PIPELINE_NAME}/${GIT_PATH}"){
                            // def out = sh script:"dockerfile_lint ${TARGET_FILE}", returnStatus: true
                            // sh "echo ${out}"
                            def output = sh(returnStdout: true, script: 'dockerfile_lint ${TARGET_FILE} > result 2>&1', returnStatus: true)
                            sh "cat result"
                        }
                    }
                    stage('Build Docker image') {
                        dir("${PIPELINE_NAME}/${GIT_PATH}"){
                            sh "docker build --no-cache -t ${image_name} -f ${TARGET_FILE} ."
                            sh "docker images"
                        }
                    }
                    stage('Scan the image') {
                        sh "docker create --name=${scan_data_container} ${scan_data_image}"
                        parallel (
                            "list yum update": {
                              sh (returnStdout: true, script: "docker run --rm --volumes-from ${scan_data_container} --entrypoint /bin/python ${image_name} /opt/scanning/yumupdates.py > yum-check-update 2>&1", returnStatus: true)
                              sh "cat yum-check-update"
                            },
                            "Verify installed RPMs contents": {
                              sh (returnStdout: true, script: "docker run --rm --volumes-from ${scan_data_container} --entrypoint /bin/python ${image_name} /opt/scanning/rpmverify.py > rpm-verify 2>&1", returnStatus: true)
                              sh "cat rpm-verify"
                            },
                            "List pip, npm, gem updates": {
                              sh (returnStdout: true, script: "docker run --rm --volumes-from ${scan_data_container} --entrypoint /bin/python ${image_name} /opt/scanning/misc_package_updates.py all > misc-updates 2>&1", returnStatus: true)
                              sh "cat misc-updates"
                            }
                        )
                        sh "docker stop ${scan_data_container} && docker rm ${scan_data_container}"
                        sh "docker volume prune -f"
                    }
                    stage("Push image to registry") {
                        sh "docker tag ${image_name} ${image_name_with_registry}"
                        sh "docker push ${image_name_with_registry}"
                    }
                    // this stage should be triggered after image is delivered to the registry
                    stage('Remove the image'){
                        sh "docker rmi ${image_name_with_registry}"
                        sh "docker rmi ${image_name}"
                    }
                }
            }
          env:
          - name: GIT_URL
            value: ${GIT_URL}
          - name: GIT_BRANCH
            value: ${GIT_BRANCH}
          - name: GIT_PATH
            value: ${GIT_PATH}
          - name: TARGET_FILE
            value: ${TARGET_FILE}
          - name: DESIRED_TAG
            value: ${DESIRED_TAG}
          - name: NOTIFY_EMAIL
            value: ${NOTIFY_EMAIL}
          - name: DEPENDS_ON
            value: ${DEPENDS_ON}
          - name: BUILD_CONTEXT
            value: ${BUILD_CONTEXT}
          - name: PIPELINE_NAME
            value: ${PIPELINE_NAME}
          - name: APP_ID
            value: ${APP_ID}
          - name: JOB_ID
            value: ${JOB_ID}
          - name: REGISTRY_URL
            value: ${REGISTRY_URL}
parameters:
- description: "Path to a directory containing a Dockerfile"
  displayName: "Git Path"
  name: GIT_PATH
  required: true
- description: "Name of the dockerfile to be built"
  displayName: Dockerfile
  name: TARGET_FILE
  required: true
- description: Tag for the resulting image
  displayName: Desired Tag
  name: DESIRED_TAG
  required: true
- description: Email to send notification to
  displayName: Notification email
  name: NOTIFY_EMAIL
  required: true
- description: Parent image for the project
  displayName: Parent image
  name: DEPENDS_ON
- description: URL to the Git Repo
  displayName: Git URL
  name: GIT_URL
- description: Git branch to build off
  displayName: Git Branch
  name: GIT_BRANCH
  required: true
- description: Docker build context
  displayName: Build Context
  name: BUILD_CONTEXT
  required: true
  value: "./"
- description: Name of the Pipeline as we want to show up on OpenShift console
  displayName: Pipeline Name
  name: PIPELINE_NAME
  required: true
- description: Git repo containing the Jenkinsfile
  displayName: Jenkinsfile repo
  name: JENKINSFILE_GIT_URL
  required: true
  value: https://github.com/dharmit/ccp-openshift
- description: Git repo branch containing the Jenkinsfile
  displayName: Jenkinsfile repo branch
  name: JENKINSFILE_GIT_BRANCH
  required: true
  value: master
- description: Context dir is base path to find Jenkinsfile
  displayName: Context dir
  name: CONTEXT_DIR
  required: true
- description: app_id is analogoues to username in Docker Hub
  displayName: App ID
  name: APP_ID
  required: true
- description: job_id is analogoues to repo name in Docker Hub
  displayName: Job ID
  name: JOB_ID
  required: true
- description: URL of the registry to which image is to be pushed
  name: REGISTRY_URL
  displayName: Registry URL

