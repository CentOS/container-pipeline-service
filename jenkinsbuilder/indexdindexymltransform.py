from yaml import load, safe_dump
from glob import glob
import os
import sys
from argparse import ArgumentParser


class IndexGenerator:

    def __init__(self,indexdpath="./index.d", indexyml="./index.yml", reverse=False):

        self._indexdotd = os.path.abspath(indexdpath)
        self._indexyml = os.path.abspath(indexyml)
        self._reverse = reverse

        if not self._reverse:

                if not os.path.exists(self._indexdotd):
                    raise ValueError("Invalid path specified.")

        else:

            if not os.path.exists(self._indexyml):
                raise ValueError("Invalid path specified")

        return

    def _genindexyml(self, potentialindexfiles):

        currentindex = 1

        indexyml = {
            "Projects": []
        }

        for potentialindexfile in potentialindexfiles:

            filename = os.path.split(potentialindexfile)[1]
            namespace = ""

            if "." in filename:

                namespace = filename.split(".")[0]

            else:

                namespace = filename

            potentialindexdata = None

            with open(potentialindexfile, "r") as thefile:

                potentialindexdata = load(thefile)

            for entry in potentialindexdata:

                tid = currentindex
                appid = namespace
                jobid = entry["job-id"]
                giturl = entry["git-url"]
                gitpath = entry["git-path"]
                gitbranch = entry["git-branch"]
                targetfile = entry["target-file"]
                desiredtag = entry["desired-tag"]
                notifyemail = entry["notify-email"]
                dependson = entry["depends-on"]

                indexyml["Projects"].append({

                    "id": tid,
                    "app-id": appid,
                    "job-id": jobid,
                    "git-url": giturl,
                    "git-path": gitpath,
                    "git-branch": gitbranch,
                    "target-file": targetfile,
                    "desired-tag": desiredtag,
                    "notify-email": notifyemail,
                    "depends-on": dependson

                })

                currentindex += 1

        with open(self._indexyml, "w") as indexymlfile:

            safe_dump(indexyml, indexymlfile, default_flow_style=False, indent=2)

        cl1 = "This file is generated by the CentOS Community Container Pipeline Service"
        cl2 = "Please do not edit this file manually."
        commentline = str.format("# {0}\n# {1}\n\n", cl1, cl2)

        with open(self._indexyml, "r") as original: data = original.read()
        with open(self._indexyml, "w") as modified: modified.write(commentline + data)

        return

    def _genindexd(self):

        indexyml = None
        data = {}

        with open(self._indexyml, "r") as indexfile:

            indexyml = load(indexfile)

        for project in indexyml["Projects"]:

            appid = project["app-id"]
            jobid = project["job-id"]
            giturl = project["git-url"]
            gitpath = project["git-path"]
            gitbranch = project["git-branch"]
            targetfile = project["target-file"]
            notifyemail = project["notify-email"]
            dependson = project["depends-on"]

            if "desired-tag" not in project.keys():

                desiredtag = "latest"

            else:

                desiredtag = project["desired-tag"]

            if appid not in data.keys():

                data[appid] = []

            data[appid].append({

                "job-id": jobid,
                "git-url": giturl,
                "git-path": gitpath,
                "git-branch": gitbranch,
                "target-file": targetfile,
                "notify-email": notifyemail,
                "desired-tag": desiredtag,
                "depends-on": dependson

            })

        for key, value in data.items():

            if key is not None:
                filenm = self._indexdotd + "/" + key + ".yml"

                if os.path.exists(filenm):

                    os.remove(filenm)

                with open(filenm, "a+") as thefile:

                    safe_dump(value, thefile, default_flow_style=False)

        return

    def run(self):

        if not self._reverse:
            potentialfiles = self._indexdotd + "/*.yml"

            self._genindexyml(glob(potentialfiles))

            return self._indexyml

        self._genindexd()
        return self._indexdotd

def initparser():

    parser = ArgumentParser(description="This script transforms index.d files to index.yml files and vice versa")

    parser.add_argument("-r",
                        "--reverse",
                        help="Tranform index.yml to index.d format.",
                        action="store_true")

    parser.add_argument("indexd",
                        help="The path of the index.d directory")

    parser.add_argument("indexyml",
                        help="The path of the index.yml file")

    return parser

if __name__ == '__main__':

    cmdargs = initparser().parse_args()

    IndexGenerator(indexdpath=cmdargs.indexd, indexyml=cmdargs.indexyml, reverse=cmdargs.reverse).run()