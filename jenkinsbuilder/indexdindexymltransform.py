from yaml import load, safe_dump
from glob import glob
import os
from argparse import ArgumentParser
from collections import defaultdict


class IndexGenerator:
    """This class transforms index.d to index.yml and vice versa, Generating one or the other, as needed"""

    def __init__(self, indexd_path="./index.d", index_yml="./index.yml", reverse=False):
        """Initialze a generator, giving path of index.d and index.yml and specifying is reverse transform needs to be
        done"""

        self._index_dotd = indexd_path
        self._index_yml = index_yml
        self._reverse = reverse

        # If not reverse, check index.d folder for existence.
        if not self._reverse:
                if not os.path.exists(self._index_dotd):
                    raise ValueError("Invalid path specified.")

        # Otherwise, check for index.yml existance
        else:
            if not os.path.exists(self._index_yml):
                raise ValueError("Invalid path specified")

    def _genindexyml(self, potential_index_files):
        """Generate index.yml from index.d files"""

        current_index = 1
        index_yml = {
            "Projects": []
        }

        # Read every yaml file in list of yaml files
        for potential_index_file_path in potential_index_files:

            # Get the file basename by path split and take the 2nd part which is only the file name
            file_name = os.path.split(potential_index_file_path)[1]
            namespace = ""

            if file_name != "index_template.yml":

                # If a filename contains a ., take everything before the . as project namespace
                if "." in file_name:
                    namespace = file_name.split(".")[0]

                # Otherwise the project namespace is the entire filename
                else:
                    namespace = file_name

                potential_index_data = None

                # Read the yaml data in the file
                with open(potential_index_file_path, "r") as potential_index_file:
                    potential_index_data = load(potential_index_file)

                # Go through every entry in the yaml data file, extracting what is needed.
                for entry in potential_index_data:
                    tid = current_index
                    app_id = namespace

                    # Append the collected and generated information to indexyml data collector
                    index_yml["Projects"].append({
                        "id": tid,
                        "app-id": app_id,
                        "job-id": entry["job-id"],
                        "git-url": entry["git-url"],
                        "git-path": entry["git-path"],
                        "git-branch": entry["git-branch"],
                        "target-file": entry["target-file"],
                        "desired-tag": entry["desired-tag"],
                        "notify-email": entry["notify-email"],
                        "depends-on": entry["depends-on"]
                    })

                    current_index += 1

        # Dump the indexyml data to specfied index.yml
        with open(self._index_yml, "w") as index_yml_file: 
            safe_dump(index_yml, index_yml_file, default_flow_style=False, indent=2)

        # Add few lines of comment indicating the the file is generated.
        commentline = "# This file is generated by the CentOS Community Container Pipeline Service\n"

        with open(self._index_yml, "r") as original:
            data = original.read()

        with open(self._index_yml, "w") as modified:
            modified.write(commentline + data)

    def _genindexd(self):
        """Generate index.d files given index.yml"""

        index_yml = None
        indexd_data = {}

        # Open the indexyml file and read the yaml data
        with open(self._index_yml, "r") as index_file:
            index_yml = load(index_file)

        # For every project in the indexyml file, collect the necessary data
        for project in defaultdict(index_yml["Projects"]):
            app_id = project["app-id"]

            # If no desired-tag is specified, assume a default, otherwise take specified desired-tag
            if "desired-tag" not in project:
                desired_tag = "latest"

            else:
                desired_tag = project["desired-tag"]

            # If there isnt already indexd data entry for a specific appid, add it.
            # The appid will be used later on to set the filenames
            if app_id not in indexd_data:
                indexd_data[app_id] = []

            # Append the collected and generated data to indexd data
            indexd_data[app_id].append({
                "job-id": project["job-id"],
                "git-url": project["git-url"],
                "git-path": project["git-path"],
                "git-branch": project["git-branch"],
                "target-file": project["target-file"],
                "notify-email": project["notify-email"],
                "desired-tag": desired_tag,
                "depends-on": project["depends-on"]
            })

        # Iterate through the indexd data, reading
        # key : appid, name of the index.d file (appid.yml)
        # value : list of entries to go into that file
        for key, value in indexd_data.items():

            # Dump the yml value to the key.yml in index.d
            if key is not None:
                file_name = self._index_dotd + "/" + key + ".yml"

                if os.path.exists(file_name):
                    os.remove(file_name)
                with open(file_name, "a+") as the_file:
                    safe_dump(value, the_file, default_flow_style=False)

    def run(self):
        """Run the transformer, getting the index.yml or index.d respectively"""

        if not self._reverse:
            potential_files = self._index_dotd + "/*.yml"
            self._genindexyml(glob(potential_files))
            return self._index_yml

        self._genindexd()
        return self._index_dotd


def initparser():
    """Initialize the parser."""

    parser = ArgumentParser(description="This script transforms index.d files to index.yml files and vice versa")
    parser.add_argument("-r",
                        "--reverse",
                        help="Tranform index.yml to index.d format.",
                        action="store_true")
    parser.add_argument("indexd",
                        help="The path of the index.d directory")
    parser.add_argument("indexyml",
                        help="The path of the index.yml file")

    return parser

if __name__ == '__main__':

    cmdargs = initparser().parse_args()
    IndexGenerator(indexd_path=cmdargs.indexd, index_yml=cmdargs.indexyml, reverse=cmdargs.reverse).run()