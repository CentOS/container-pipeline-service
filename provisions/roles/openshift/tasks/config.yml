---
- name: Enable Docker insecure registry
  lineinfile:
    dest: /etc/sysconfig/docker
    line: 'INSECURE_REGISTRY="--insecure-registry 172.30.0.0/16 --insecure-registry {{ intranet_registry }}"'

- name: Enable Docker registry
  lineinfile:
    dest: /etc/sysconfig/docker
    line: 'ADD_REGISTRY="--add-registry {{ public_registry }}"'

- name: Restart Docker
  service: name=docker state=restarted enabled=yes

- name: Create openshift shared dirs
  file: name={{item}} state=directory
  with_items: "{{ openshift_shared_dirs }}"

- name: Set SELinux context for openshift shared dirs
  command: chcon -Rt svirt_sandbox_file_t {{ item }}
  with_items: "{{ openshift_shared_dirs }}"
  tags: selinux

- name: Pull openshift images
  docker_image:
      name: "{{ item }}"
      tag: "{{ origin_image_tag }}"
  with_items:
      - "{{ origin_image_registry }}/{{ origin_image_name }}"
      - "{{ origin_image_registry }}/{{ origin_image_name }}-haproxy-router"
      - "{{ origin_image_registry }}/{{ origin_image_name }}-deployer"
      - "{{ origin_image_registry }}/{{ origin_image_name }}-docker-registry"
      - "{{ origin_image_registry }}/{{ origin_image_name }}-pod"


# Below is due to THIS issue: https://github.com/kubernetes/kubernetes/issues/43856 which we can't do anything about
# (running Kubernetes docker-in-docker as well as on a CentOS 7 host causes issues...)
# First we created the configuration so we can append some values
- name: Create config OpenShift origin container
  when: deployment == "docker"
  docker_container:
    name: origin-config
    image: "{{ origin_image_registry }}/{{ origin_image_name }}:{{ origin_image_tag }}"
    privileged: yes
    pid_mode: host
    network_mode: host
    recreate: yes
    volumes: "{{ openshift_volumes }}"
    command: start --master=https://"{{ansible_default_ipv4.address}}":8443 --write-config=/var/lib/origin/openshift.local.config

- name: Quick pause to catch up to configuration being propagated
  when: deployment == "docker"
  pause:
    seconds: 30

# Append to the configuration to disable QOS
# See: https://github.com/kubernetes/kubernetes/issues/43856
- name: Append to config disabling QoS for OpenShift Origin
  when: deployment == "docker"
  lineinfile: 
    dest: /var/lib/origin/openshift.local.config/node-{{ ansible_hostname }}/node-config.yaml
    line: '{{ item }}'
  with_items:
    - 'kubeletArguments:'
    - '  cgroups-per-qos:'
    - '  - "false"' 
    - '  enforce-node-allocatable:'
    - '  - ""'

- name: Create test OpenShift origin container
  when: deployment == "docker"
  docker_container:
    name: origin-test
    image: "{{ origin_image_registry }}/{{ origin_image_name }}:{{ origin_image_tag }}"
    privileged: yes
    pid_mode: host
    network_mode: host
    volumes: "{{ openshift_volumes }}"
    command: start --master=https://"{{ansible_default_ipv4.address}}":8443 --node-config=/var/lib/origin/openshift.local.config/node-{{ ansible_hostname }}/node-config.yaml --master-config=/var/lib/origin/openshift.local.config/master/master-config.yaml
    restart_policy: always
    restart_retries: 2

- name: Create production OpenShift origin container
  when: deployment != "docker"
  docker_container:
    name: origin
    image: "{{ origin_image_registry }}/{{ origin_image_name }}:{{ origin_image_tag }}"
    privileged: yes
    pid_mode: host
    network_mode: host
    volumes: "{{ openshift_volumes }}"
    command: start --master=https://"{{ansible_default_ipv4.address}}":8443
    restart_policy: always

- name: Wait for Openshift to come up
  pause: seconds={{ openshift_startup_delay }}

- name: Copy Openshift binaries
  command: docker cp origin:/usr/bin/openshift {{item}}
  with_items:
    - /usr/bin/oc
    - /usr/bin/oadm

- name: Ensure openshift binaries are executable
  file: dest="{{ item }}" mode="a+x"
  with_items:
    - /usr/bin/oc
    - /usr/bin/oadm

- name: Set perms for kubeconfig
  file: dest={{kubeconfig}} mode="go+r"
