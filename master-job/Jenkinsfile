podTemplate(
    cloud: 'openshift',
    name: 'ccp-pipeline',
    label: 'ccp-pipeline',
    serviceAccount: 'jenkins',
    containers: [
      containerTemplate(
        name: 'jnlp',
        image: 'registry.centos.org/dharmit/ccp-openshift-slave',
        ttyEnabled: true,
        alwaysPullImage: true,
        workingDir: '/tmp',
        privileged: true,
        args: '${computer.jnlpmac} ${computer.name}'
      )
    ],
    volumes: [
      hostPathVolume(
        hostPath: '/var/run/docker.sock',
        mountPath: '/var/run/docker.sock'
      )
    ]
)
{
    node('ccp-pipeline') {
        stage('Checkout Source') {
            dir("${PIPELINE_NAME}"){
                git url: '${GIT_URL}', branch: '${GIT_BRANCH}'
            }
        }
        stage('Lint the Dockerfile'){
            dir("${PIPELINE_NAME}/${GIT_PATH}"){
                // def out = sh script:"dockerfile_lint ${TARGET_FILE}", returnStatus: true
                // sh "echo ${out}"
                def output = sh(returnStdout: true, script: 'dockerfile_lint ${TARGET_FILE} > result 2>&1', returnStatus: true)
                sh "cat result"
            }
        }
        stage('Build Docker image') {
            dir("${PIPELINE_NAME}/${GIT_PATH}"){
                sh "docker build --no-cache -t ${APP_ID}/${JOB_ID}:${DESIRED_TAG} -f ${TARGET_FILE} ."
                sh "docker images"
            }
        }
        stage('Scan the image') {
            sh "docker run --name scan_${APP_ID}_${JOB_ID}_${DESIRED_TAG} -d ${APP_ID}/${JOB_ID}:${DESIRED_TAG} tail -f /dev/null"
            parallel (
                "list yum update": {
                    sh "docker exec -t scan_${APP_ID}_${JOB_ID}_${DESIRED_TAG} yum -q check-update"
                },
                "rpm -Va":  {
                    sh "docker exec -t scan_${APP_ID}_${JOB_ID}_${DESIRED_TAG} rpm -Va"
                }
            )
            sh "docker stop scan_${APP_ID}_${JOB_ID}_${DESIRED_TAG} && docker rm scan_${APP_ID}_${JOB_ID}_${DESIRED_TAG}"
        }
    }
}
