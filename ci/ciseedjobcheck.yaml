apiVersion: "v1"
kind: "Template"
metadata:
  name: "container-pipeline-seedjob-check-ci-job"
objects:
  - apiVersion: "v1"
    kind: "BuildConfig"
    metadata:
        name: ci-seed-job-check
    spec:
      strategy:
        type: "JenkinsPipeline"
        jenkinsPipelineStrategy:
          jenkinsfile: |
                import groovy.json.JsonSlurperClassic
                podTemplate(
                    cloud: 'openshift',
                    name: 'ccp-pipeline-ci',
                    label: 'ccp-pipeline-ci',
                    serviceAccount: 'jenkins',
                    containers: [
                      containerTemplate(
                        name: 'jnlp',
                        image: 'registry.centos.org/pipeline-images/ccp-openshift-slave',
                        ttyEnabled: true,
                        alwaysPullImage: true,
                        workingDir: '/tmp',
                        privileged: true,
                        args: '${computer.jnlpmac} ${computer.name}'
                      )
                    ],
                    volumes: [
                      hostPathVolume(
                        hostPath: '/var/run/docker.sock',
                        mountPath: '/var/run/docker.sock'
                      )
                    ]
                )
                {
                    node('ccp-pipeline-ci') {
                        /** *this variable is ment for storing complete build id for the triggred build
                        * it would be a string in format <build-config-name>-<build-number> */
                        def seedjob_build_id = "${SEEDJOB_BUILD_ID}"
                        stage("Wait for build to start")
                        {
                            //Wait for the build to get a slave allocated and move from wait queue
                            waitForSuccessBuildToStart(seedjob_build_id)
                        }
                        stage("Check Index is checked out")
                        {
                            /** *Checking for first stage (i.e.  Checkout index) expected to be 'Successful'
                            * this is first stage of the pipeline so index starts with '0' */
                            checkStageStatus(seedjob_build_id, 0, "success")
                        }
                        stage("Check parse index status")
                        {
                            //Checking second stage (i.e. parse index) expected to be 'Successful'
                            checkStageStatus(seedjob_build_id, 1, "success")
                        }
                        stage("Check pipelines are created")
                        {
                            checkBuildConfigAvailability("buildconfigs/centos-kubernetes-master","available")
                            checkBuildConfigAvailability("buildconfigs/bamachrn-python-release", "not_available")
                            checkBuildConfigAvailability("buildconfigs/nshaikh-build-fail-test-latest", "not_available")
                            checkBuildConfigAvailability("buildconfigs/gluster-storagesig-heketi-latest", "available")
                        }
                    }
                }
                def waitForSuccessBuildToStart(build_id)
                {
                    waitUntil{
                        def build_started = sh(returnStdout: true, script: "oc get builds ${build_id} -o template --template={{.status.phase}}")
                        echo "Build status: ${build_started}"
                        if (build_started == 'New'|| build_started == 'Pending'){
                            echo "Build is in ${build_started} state waiting..."
                            sleep 10
                            echo "Rechecking the status"
                            false
                        }
                        else{
                            echo "Build started going for stage checking now"
                            sleep 10
                            true
                        }
                    }
                }
                def waitForStageToComplete(build_id, stage_number)
                {
                    echo "build_id: ${build_id} stage: ${stage_number}"
                    waitUntil{
                        build_status = sh(returnStdout: true, script: "oc get builds ${build_id} -o template  --template='{{index .metadata.annotations \"openshift.io/jenkins-status-json\"}}'").trim()
                        def build_status_obj = new JsonSlurperClassic().parseText(build_status)
                        if ( build_status_obj.stages[stage_number] == null ){
                            sleep 30
                            false
                        }
                        else{
                            if ( build_status_obj.stages[stage_number]['status'] != 'SUCCESS' && build_status_obj.stages[stage_number]['status'] != 'FAILED')
                            {
                                echo "Stage status is: ${build_status_obj.stages[stage_number]['status']} waiting to complete"
                                false
                            }
                            else
                            {
                                echo "Stage complete"
                                true
                            }
                        }
                    }
                }
                def checkBuildConfigAvailability(expected_bc_name, expected_status)
                {
                    echo "build_config: ${expected_bc_name} expected_status: ${expected_status}"
                    def actual_status = false

                    bc_name = sh(returnStdout: true, script: "oc get ${expected_bc_name} -o name")

                    //This function checks for a build config to be existing or not.
                    if ( expected_status == "available" )
                    {
                        if ( bc_name.toLowerCase() == expected_bc_name.toLowerCase() )
                        {
                            echo "Stage assertion passed"
                            actual_status = true
                        }
                        else
                        {
                            echo "Stage assertion failed"
                        }
                    }
                    else if(expected_status == "not_available")
                    {
                        if( bc_name.toLowerCase() == expected_bc_name.toLowerCase() )
                        {
                            echo "Stage assertion failed"
                        }
                        else
                        {
                            echo "Stage assertion passed"
                            actual_status = true
                        }
                    }
                    if (!actual_status)
                    {
                        currentBuild.result = 'FAILURE'
                        error "Check failed: Going to fail state"
                    }
                }
          env:
          - name: SEEDJOB_BUILD_ID
            value: ${SEEDJOB_BUILD_ID}
parameters:
- description: ID for the seed job run with updated index
  displayName: Seedjob build ID
  name: SEEDJOB_BUILD_ID
  required: true
