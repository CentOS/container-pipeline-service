import groovy.json.JsonSlurperClassic

podTemplate(
    cloud: 'openshift',
    name: 'ccp-pipeline',
    label: 'ccp-pipeline',
    serviceAccount: 'jenkins',
    containers: [
      containerTemplate(
        name: 'jnlp',
        image: 'registry.centos.org/dharmit/ccp-openshift-slave',
        ttyEnabled: true,
        alwaysPullImage: true,
        workingDir: '/tmp',
        privileged: true,
        args: '${computer.jnlpmac} ${computer.name}'
      )
    ],
    volumes: [
      hostPathVolume(
        hostPath: '/var/run/docker.sock',
        mountPath: '/var/run/docker.sock'
      )
    ]
)
{
    node('ccp-pipeline') {
        def failure_build_status = "failed"
        def success_build_Status = "success"
        def success_build_id = "success_build_id"
        def failure_build_id = "failure_build_id"
        def build_status="build_status_string"
        stage("Trigger builds"){
            parallel (
                "success build": {
                    success_build_id = sh(returnStdout: true, script: "oc start-build bamachrn-python-release -n cccp |cut -f 2 -d ' '").trim()
                    echo "success Build id: ${success_build_id}"
                },
                "failure build": {
                    failure_build_id = sh(returnStdout: true, script: "oc start-build nshaikh-build-fail-test-latest -n cccp|cut -f 2 -d ' '").trim()
                    echo "Failure Build id: ${failure_build_id}"
                }
            )
        }
        stage("Wait till builds are started")
        {
            waitForBuildToStart(success_build_id)
        }
        stage("Check checkout status")
        {
            waitForStageToComplete(success_build_id,0)
            checkBuildStatus(success_build_id,0)
        }
        stage("Check dockerfile linter status")
        {
            waitForStageToComplete(success_build_id,1)
            checkBuildStatus(success_build_id,1)
        }
        stage("Check Build status")
        {
            waitForStageToComplete(success_build_id,2)
            checkBuildStatus(success_build_id,2)
        }
    }
}
def waitForBuildToStart(build_id)
{
    waitUntil{
        def build_started = sh(returnStdout: true, script: "oc get builds ${build_id} -o template --template={{.status.phase}}")
        echo "Build status: ${build_started}"
        if (build_started != 'Running'){
            echo "Build is in ${build_started} state waiting..."
            sleep 30
            echo "Rechecking the status"
            false
        }
        else{
            echo "Build started going for stage checking now"
            sleep 30
            true
        }
    }
}
def waitForStageToComplete(build_id,stage_number)
{
    echo "build_id: ${build_id} stage: ${stage_number}"
    waitUntil{
        build_status = sh(returnStdout: true, script: "oc get builds ${build_id} -o template  --template='{{index .metadata.annotations \"openshift.io/jenkins-status-json\"}}'").trim()
        def build_status_obj = new JsonSlurperClassic().parseText(build_status)
        if ( build_status_obj.stages[stage_number] == null ){
            sleep 30
            false
        }
        else{
            if ( build_status_obj.stages[stage_number]['status'] != 'SUCCESS' && build_status_obj.stages[stage_number]['status'] != 'FAILURE')
            {
                echo "Stage status is: ${build_status_obj.stages[stage_number]['status']} waiting to complete"
                false
            }
            else
            {
                echo "Stage complete"
                true
            }
        }
    }
}
def checkBuildStatus(build_id,stage_number)
{
    echo "build_id: ${build_id} stage: ${stage_number}"

    build_status = sh(returnStdout: true, script: "oc get builds ${build_id} -o template  --template='{{index .metadata.annotations \"openshift.io/jenkins-status-json\"}}'").trim()
    def build_status_obj = new JsonSlurperClassic().parseText(build_status)
    def stage_name = build_status_obj.stages[stage_number]['name']
    def stage_status = build_status_obj.stages[stage_number]['status']
    echo "Stage name: ${stage_name}"
    echo "Stage status: ${stage_status}"
}
